// DEFS
def pomDescription = (hasProperty("pomDescription") ? getProperty("pomDescription") : "Minter Blockchain Android SDK")
group = (hasProperty("group") ? getProperty("group") : 'minter.network.android')
version = android.defaultConfig.versionName
def releaseGroup = this.group
def releaseVersion = this.version
def releaseArtifactId = project.name

// TASKS
tasks.withType(Jar) {
    from(project.projectDir) {
        include 'LICENSE'
        into 'META-INF'
    }
}

task androidJavadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
    classifier = 'javadoc'
    from androidJavadoc.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

publishing {
    publications {
        "${releaseArtifactId}"(MavenPublication) {
            groupId releaseGroup
            artifactId releaseArtifactId
            version releaseVersion

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${releaseArtifactId}-release.aar")
            artifact androidSourcesJar
            artifact androidJavadocJar

            pom.withXml {
                asNode().appendNode("description", pomDescription)
                def licenses = asNode().appendNode("licenses")
                def mitLicense = licenses.appendNode("license")
                mitLicense.appendNode("name", "MIT License")
                mitLicense.appendNode("url", "https://opensource.org/licenses/MIT")
                mitLicense.appendNode("distribution", "repo")

                def developer = asNode().appendNode("developers").appendNode("developer")
                developer.appendNode("id", "edwardstock")
                developer.appendNode("name", "Eduard Maximovich")
                developer.appendNode("email", "edward.vstock@gmail.com")
                developer.appendNode("url", "https://github.com/edwardstock")
                developer.appendNode("roles").appendNode("role", "developer")
                developer.appendNode("timezone", "Europe/Moscow")

                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

if (hasProperty("artifactoryUser") && hasProperty("artifactoryPass")) {

    artifactory {
        contextUrl = getProperty("artifactoryUrl")
        publish {
            repository {
                version = releaseVersion
                repoKey = "libs-release-local"
                username = getProperty("artifactoryUser")
                password = getProperty("artifactoryPass")
                maven = true
            }

            defaults {
                publications(releaseArtifactId)
                publishConfigs('archives')
                properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
                publishBuildInfo = true
                publishArtifacts = true
                publishPom = true
                publishIvy = false
            }
        }
    }
}